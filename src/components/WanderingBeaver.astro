<div id="beaver"></div>

<style>
	#beaver {
		position: fixed;
		/* top and left are set by JS */
		width: 32px;
		height: 32px;
		z-index: 9999;
		image-rendering: pixelated;
		transform: scale(2);
		transform-origin: center;
		background-image: url('/Beaver%20Sprite%20Sheet.png');
		background-repeat: no-repeat;
		
		background-position-y: var(--animation-y);
		animation: move-sprite var(--animation-duration) steps(var(--animation-frames)) infinite;
        transition: top 1s ease-in-out;
	}
</style>

<style is:global>
	@keyframes move-sprite {
		from { background-position-x: 0px; }
		to { background-position-x: calc(-32px * var(--animation-frames)); }
	}
</style>

<script is:inline>
	const beaver = document.getElementById("beaver");

	if (beaver) {
        // --- Animation & State Setup ---
        const animations = {
            walk:      { y: -32,  frames: 4, duration: 0.4 },
            swim:      { y: -224, frames: 4, duration: 0.6 },
            idleWater: { y: -192, frames: 4, duration: 0.8 },
            ascent:    { y: -320, frames: 4, duration: 0.5 },
            build:     { y: -96,  frames: 4, duration: 0.5 }, // New build animation
        };

        let currentState = '';
        let x, y; // position
		let xSpeed = 1;
		let directionX = 1;
        let introDone = false;
        let isBuilding = false; // New state for building

        function setAnimation(name) {
            const anim = animations[name];
            if (!anim || currentState === name) return;

            beaver.style.setProperty('--animation-y', `${anim.y}px`);
            beaver.style.setProperty('--animation-frames', anim.frames);
            beaver.style.setProperty('--animation-duration', `${anim.duration}s`);
            currentState = name;
        }

        // --- Intro Logic ---
        function runIntro() {
            // Position near where the header would be
            x = 100;
            y = 150; // pixels from top
            beaver.style.left = `${x}px`;
            beaver.style.top = `${y}px`;

            setAnimation('ascent');

            // After ascent animation, start swimming out
            setTimeout(() => {
                if (isBuilding) return; // Don't interrupt building
                setAnimation('swim');
                xSpeed = 2;
                directionX = 1;
                introSwimLoop();
            }, 500); // duration of ascent
        }

        function introSwimLoop() {
            x += xSpeed * directionX;
            beaver.style.left = `${x}px`;

            const viewportWidth = window.innerWidth;
            if (x > viewportWidth) {
                introDone = true;
                resetBeaver();
                frameLoop(); // Start main random loop
            } else {
                if (!isBuilding) requestAnimationFrame(introSwimLoop);
            }
        }

        // --- Main Wander Logic ---
        function resetBeaver() {
            const viewportWidth = window.innerWidth;
            const viewportHeight = window.innerHeight;
            
            directionX = Math.random() < 0.5 ? 1 : -1;
            xSpeed = Math.random() * 1.5 + 0.5;
            
            x = directionX === 1 ? -64 : viewportWidth;
            y = Math.random() * (viewportHeight - 100);
            
            beaver.style.top = `${y}px`;

            const isScrolled = window.scrollY > viewportHeight / 2;
            setAnimation(isScrolled ? 'swim' : 'walk');
        }

		function frameLoop() {
			const viewportWidth = window.innerWidth;
            const beaverWidth = 64;

			x += xSpeed * directionX;

            if ((directionX === 1 && x > viewportWidth) || (directionX === -1 && x < -beaverWidth)) {
                if (!isBuilding) resetBeaver();
            }
			
			beaver.style.transform = directionX === 1 ? 'scale(2)' : 'scale(2) scaleX(-1)';
			beaver.style.left = `${x}px`;

			if (!isBuilding) requestAnimationFrame(frameLoop);
		}

        // --- Scroll Logic ---
        function handleScroll() {
            if (!introDone || isBuilding) return; // Don't interfere with intro or building

            const viewportHeight = window.innerHeight;
            const isScrolled = window.scrollY > viewportHeight / 2;

            if (isScrolled && currentState === 'walk') {
                setAnimation('swim');
            } else if (!isScrolled && (currentState === 'swim' || currentState === 'idleWater')) {
                setAnimation('walk');
            }
        }
        
        let scrollTimeout;
        window.addEventListener('scroll', () => {
            clearTimeout(scrollTimeout);
            scrollTimeout = setTimeout(handleScroll, 100);
        });

        // --- Command Logic ---
        document.addEventListener('beaverCommand', (e) => {
            const command = e.detail.toLowerCase();

            if (command === 'build a dam') {
                isBuilding = true;
                setAnimation('build');
                // Stop moving
                setTimeout(() => {
                    isBuilding = false;
                    resetBeaver();
                    frameLoop();
                }, 2000); // Build for 2 seconds
            } else if (command.startsWith('go open post')) {
                const postSlug = command.replace('go open post', '').trim();
                if (postSlug) {
                    window.location.href = `/post/${postSlug}`;
                }
            } else if (command === 'stop') {
                isBuilding = true; // A way to pause it
            } else if (command === 'go') {
                if (isBuilding) {
                    isBuilding = false;
                    resetBeaver();
                    frameLoop();
                }
            }
        });

        // --- Initialization ---
        runIntro();
	}
</script> 